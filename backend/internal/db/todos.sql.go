// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todos.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (description) VALUES ($1)
RETURNING id, description, completed
`

func (q *Queries) CreateTodo(ctx context.Context, description string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, description)
	var i Todo
	err := row.Scan(&i.ID, &i.Description, &i.Completed)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, description, completed FROM todos ORDER BY id
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Description, &i.Completed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markTodoDone = `-- name: MarkTodoDone :exec
UPDATE todos SET completed = true WHERE id = $1
`

func (q *Queries) MarkTodoDone(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markTodoDone, id)
	return err
}
